   using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace USEPA_Simulation_PlugIns
{
    /// <summary>
    /// Performs US EPA Waste Reduction (WAR) algorithm calculation on a flowsheet accessed using the 
    /// <see cref="ICapeFlowsheetMonitoring"/> interface.
    /// </summary>
    /// <remarks>
    /// <para>
    /// The WAR plug-in works by directly access the unit operations and material flows within the flowsheet. 
    /// Once the WAR plug-in has been instantiated by the flowsheeting environment, in this case, COFE, the WAR 
    /// plug-in is initialized and provided with a reference to the flowsheet monitoring interface enabling the 
    /// plug-in to directly access the flowsheet’s unit operation and stream collections. The flowsheet 
    /// monitoring interface is one of the features of the simulation context provided by COFE to the WAR 
    /// plug-in.</para>
    /// <para>
    /// Upon activation, the WAR plug-in enumerates all of the unit operations and streams contained within the 
    /// flowsheet using the flowsheet monitoring interface. First, the plug-in places references to the streams 
    /// in two stream collections, separate input and output stream collections. The unit operations in the unit
    /// operation collection are queried for inlet and outlet ports. The streams connected to these ports are 
    /// matched against the streams in the input and/or output stream collections. Streams that are attached to 
    /// input ports for a unit operation are then removed from the output stream collections as the no longer 
    /// leave the process. Likewise, streams that are attached to an outlet port are removed from the input 
    /// stream collection as they originate within the process. That is, streams not connected to any unit 
    /// operation outlet port are considered feed streams, and streams that are not connected to any unit
    /// operation inlet port are considered output streams. An exception to this rule is that some PMEs utilize 
    /// “source” unit operations that only have a single outlet stream and no inlet streams. These units are 
    /// considered to be feed units, and the stream connected to it is considered to be a feed stream. 
    /// Analogously, unit operations that have only a single inlet port and no outlet ports are considered to 
    /// be product units; the streams connected to it are considered to be product streams.
    /// </para>
    /// <para>This plug-in also allows users to select only portions of the flowsheet for a WAR analysis. This 
    /// is accomplished by having the user select the unit operations of interest. The feed and product stream 
    /// algorithms for a sub-set of the total unit operation collection are similar to the algorithm described 
    /// above for the total flowsheet. 
    /// </para>
    /// <para>Once the feed and product streams have been identified, the plug-in performs its WAR calculation. 
    /// The specific PEI, ψ<sub>(k,i)</sub><sup>S</sup>, for each chemical is calculated by averaging the impact category scores 
    /// for all the chemicals in the database and normalizing by dividing the chemical’s score by the average 
    /// value. Once the normalized ψ<sub>(k,i)</sub><sup>S</sup> has been calculated, the PEI generated by the 
    /// process, İ<sub>gen</sub>, is calculated using the normalized value of ψ<sub>(k,i)</sub><sup>S</sup> for 
    /// the individual categories, category weighting factor mass flow rates and the concentration of the 
    /// chemical of each stream. The plug-in allows the user to designate product streams and account for 
    /// energy usage in the WAR algorithm.
    /// </para>
    /// </remarks>
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public partial class WARalgorithm : Form, IDisposable
    {

        private System.Data.DataTable warData;
        private System.Data.DataTable compounds;
        private System.Data.DataTable streams;
        private USEPA_Simulation_PlugIns.ICapeFlowsheetMonitoring p_Monitoring;
        private System.Collections.Generic.List<CAPEOPEN.ICapeUnit> p_Units;
        private System.Collections.Generic.List<CAPEOPEN.ICapeIdentification> p_Streams;
        private System.Collections.Generic.List<CAPEOPEN.ICapeIdentification> p_InletStreams;
        private System.Collections.Generic.List<CAPEOPEN.ICapeIdentification> p_OutletStreams;
        private double[] AvgCatScore;
        private double energy;

        private System.IO.StreamReader streamToPrint;
        System.Drawing.Font printFont;
        private System.Collections.ArrayList productStreams;
        private String SheetName;
        private String SheetDescription;
        private double productFlow;
        private double iEnergyTime;
        private double iEnergyMass;
        private double iOutTime;
        private double iOutMass;
        private double iGenTime;
        private double iGenMass;
        private double[] peiOutTime;
        private double[] peiLeaveMass;
        private double[] peiGenTime;
        private double[] peiGenMass;
        private double[] peiEnergyTime;
        private bool starting;

        /// <summary>
        /// Creates a new instance of the <see cref="WARalgorithm"/> class.
        /// </summary>
        /// <param name="warDataTable"> <see cref="DataTable"/>containing chemical data used in the WAR Algorithm Calculation.</param>
        /// <param name="Monitoring">An <see cref="ICapeFlowsheetMonitoring"/> reference to the current flowsheet in the process modeling 
        /// environment (PME).</param>
        public WARalgorithm(System.Data.DataTable warDataTable, ICapeFlowsheetMonitoring Monitoring)
        {
            try
            {
                InitializeComponent();
                if (Monitoring.ValStatus != CAPEOPEN.CapeValidationStatus.CAPE_VALID)
                {
                    System.Windows.Forms.MessageBox.Show("The flow sheet is not valid. The WAR outputs may not be correct.");
                    //			throw gcnew USEPA_Simulation_PlugIns.CapeInvalidOperationException("The flow sheet is not valid. Please check the status of the flowsheet and retry.");
                }
                if (Monitoring.SolutionStatus != USEPA_Simulation_PlugIns.CapeSolutionStatus.CAPE_SOLVED)
                {
                    System.Windows.Forms.MessageBox.Show("The flow sheet has not been solved. The WAR outputs may not be correct.");
                    //			throw gcnew USEPA_Simulation_PlugIns.CapeInvalidOperationException("The flow sheet is not valid. Please check the status of the flowsheet and retry.");
                }
                CAPEOPEN.ICapeIdentification sheetID = (CAPEOPEN.ICapeIdentification)Monitoring;
                this.SheetName = sheetID.ComponentName;
                this.SheetDescription = sheetID.ComponentDescription;
                warData = warDataTable;
                energy = 0;
                productStreams = new System.Collections.ArrayList();
                compounds = new System.Data.DataTable();
                streams = new System.Data.DataTable();
                compounds.Columns.Add("Compound Name", typeof(System.String));
                compounds.Columns.Add("CAS Number", typeof(System.String));
                compounds.Columns.Add("Chemical Formula", typeof(System.String));
                compounds.Columns.Add("Molecular Weight", typeof(double));
                compounds.Columns.Add("Human Ingestion Impact", typeof(double));
                compounds.Columns.Add("Human Dermal Impact", typeof(double));
                compounds.Columns.Add("Aquatic Toxicity Impact", typeof(double));
                compounds.Columns.Add("Terrestrial Toxicity Impact", typeof(double));
                compounds.Columns.Add("Global Warming Impact", typeof(double));
                compounds.Columns.Add("Ozone Impact", typeof(double));
                compounds.Columns.Add("Photochemical Oxidation Impact", typeof(double));
                compounds.Columns.Add("Acidification Impact", typeof(double));
                streams.Columns.Add("Stream Name", typeof(System.String));
                streams.Columns.Add("Type", typeof(System.String));
                streams.Columns.Add("Total Flow", typeof(double));
                streams.Columns.Add("I Dot", typeof(double));
                streams.Columns.Add("I Hat", typeof(double));
                streams.Columns.Add("Human Ingestion", typeof(double));
                streams.Columns.Add("Human Dermal", typeof(double));
                streams.Columns.Add("Aquatic Toxicity", typeof(double));
                streams.Columns.Add("Terrestrial Toxicity", typeof(double));
                streams.Columns.Add("Global Warming", typeof(double));
                streams.Columns.Add("Ozone", typeof(double));
                streams.Columns.Add("Photochemical Oxidation", typeof(double));
                streams.Columns.Add("Acidification", typeof(double));
                p_Monitoring = Monitoring;
                p_Units = new System.Collections.Generic.List<CAPEOPEN.ICapeUnit>();
                p_Streams = new System.Collections.Generic.List<CAPEOPEN.ICapeIdentification>();
                p_InletStreams = new System.Collections.Generic.List<CAPEOPEN.ICapeIdentification>();
                p_OutletStreams = new System.Collections.Generic.List<CAPEOPEN.ICapeIdentification>();
                starting = true;
                this.ResetStreams();
                this.UpdateStreams();
                this.warCalculation();
                starting = false;
            }
            catch (System.Exception p_Ex)
            {
                System.Windows.Forms.MessageBox.Show(p_Ex.Message);
            }
        }

        ~WARalgorithm()
        {
            Dispose(false);
        }

        bool disposed = false;
        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (!disposed)
            {
                foreach (object obj in p_Streams)
                {
                    if (System.Runtime.InteropServices.Marshal.IsComObject(obj))
                    {
                        System.Runtime.InteropServices.Marshal.FinalReleaseComObject(obj);
                    }
                }
                foreach (object obj in p_InletStreams)
                {
                    if (System.Runtime.InteropServices.Marshal.IsComObject(obj))
                    {
                        System.Runtime.InteropServices.Marshal.FinalReleaseComObject(obj);
                    }
                }
                foreach (object obj in p_OutletStreams)
                {
                    if (System.Runtime.InteropServices.Marshal.IsComObject(obj))
                    {
                        System.Runtime.InteropServices.Marshal.FinalReleaseComObject(obj);
                    }
                }
                foreach (object obj in p_Units)
                {
                    if (System.Runtime.InteropServices.Marshal.IsComObject(obj))
                    {
                        System.Runtime.InteropServices.Marshal.FinalReleaseComObject(obj);
                    }
                }
                //if (System.Runtime.InteropServices.Marshal.IsComObject(p_Monitoring))
                //{
                //    System.Runtime.InteropServices.Marshal.ReleaseComObject(p_Monitoring);
                //}
            }
            disposed = true;
            // Call base class implementation.
            base.Dispose(disposing);
        }

        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.IO.Stream myStream;
            System.Windows.Forms.SaveFileDialog saveFileDialog1 = new SaveFileDialog
            {
                Filter = "txt files (*.txt)|*.txt|All files (*.*)|*.*",
                FilterIndex = 1,
                RestoreDirectory = true
            };
            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                if ((myStream = saveFileDialog1.OpenFile()) != null)
                {
                    System.IO.StreamWriter writer = new System.IO.StreamWriter(myStream);
                    writer.Write(this.textBox1.Text);
                    writer.Flush();
                    writer.Close();
                    myStream.Close();
                }
            }
        }

        private void printToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                this.printDialog1.AllowSomePages = false;
                printFont = new System.Drawing.Font("Courier New", 10);
                System.IO.MemoryStream myStream = new System.IO.MemoryStream();
                System.IO.StreamWriter writer = new System.IO.StreamWriter(myStream);
                writer.Write(this.textBox1.Text);
                writer.Flush();
                writer.BaseStream.Position = 0;
                streamToPrint = new System.IO.StreamReader(myStream);
                this.printDocument1.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(100, 100, 50, 50);
                this.printDocument1.DefaultPageSettings.Landscape = true;
                this.printDocument1.Print();
                writer.Close();
            }
            catch (System.Exception p_Ex)
            {
                System.Windows.Forms.MessageBox.Show(p_Ex.Message);
            }

        }


        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void considerEnergyFlowsCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            this.warCalculation();
        }

        private void energyTypeComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            this.warCalculation();
        }

        private void includeProductStreamsCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            this.warCalculation();
        }

        void ClearStreamArrays()
        {
            try
            {
                //  p_Streams.Clear();
                p_InletStreams.Clear();
                p_OutletStreams.Clear();
            }
            catch (System.Exception p_Ex)
            {
                System.Windows.Forms.MessageBox.Show(p_Ex.Message);
            }
        }

        void ClearUnitArrays()
        {
            try
            {
                p_Units.Clear();
            }
            catch (System.Exception p_Ex)
            {
                System.Windows.Forms.MessageBox.Show(p_Ex.Message);
            }
        }

        void UpdateStreams()
        {
            this.compounds.Rows.Clear();
            energy = 0;
            foreach (CAPEOPEN.ICapeIdentification p_Stream in p_InletStreams)
            {
                if (p_Stream is CAPEOPEN.ICapeThermoMaterial)
                {
                    CAPEOPEN.ICapeThermoMaterial p_TMO = (CAPEOPEN.ICapeThermoMaterial)p_Stream;
                    CAPEOPEN.ICapeThermoCompounds p_TCompounds = (CAPEOPEN.ICapeThermoCompounds)p_Stream;
                    object obj1 = null;
                    object obj2 = null;
                    object obj3 = null;
                    object obj4 = null;
                    object obj5 = null;
                    object obj6 = null;
                    p_TCompounds.GetCompoundList(ref obj1, ref obj2, ref obj3, ref obj4, ref obj5, ref obj6);
                    String[] comps = (String[])obj1;
                    String[] propNames = new String[1];
                    string[] casNos = (string[])obj6;
                    string[] chemForms = (string[])obj2;
                    double[] molWts = (double[])obj5;
                    p_TMO.GetOverallProp("flow", "mass", ref obj1);
                    double[] inletFlow = (double[])obj1;
                    for (int i = 0; i < comps.Length; i++)
                    {
                        bool needsAdded = true;
                        foreach (System.Data.DataRow row in compounds.Rows)
                        {
                            if (comps[i] == row["Compound Name"].ToString())
                            {
                                needsAdded = false;
                            }
                        }
                        if (needsAdded)
                        {
                            System.Data.DataRow newRow = compounds.NewRow();
                            compounds.Rows.Add(newRow);
                            newRow["Compound Name"] = comps[i];
                            newRow["CAS Number"] = casNos[i].ToString();
                            newRow["Chemical Formula"] = chemForms[i].ToString();
                            newRow["Molecular Weight"] = Convert.ToDouble(molWts[i]);
                            if (!streams.Columns.Contains(comps[i])) streams.Columns.Add(comps[i]);
                        }
                    }
                }
                else
                {
                    if (p_Stream is CAPEOPEN.ICapeCollection)
                    {
                        CAPEOPEN.ICapeCollection p_Coll = (CAPEOPEN.ICapeCollection)p_Stream;
                        CAPEOPEN.ICapeParameter p_Param = (CAPEOPEN.ICapeParameter)p_Coll.Item("work");
                        double energyFlow = Convert.ToDouble(p_Param.value);
                        energy = energy - energyFlow * 3600 / 1000000;
                        if (System.Runtime.InteropServices.Marshal.IsComObject(p_Coll)) System.Runtime.InteropServices.Marshal.ReleaseComObject(p_Coll);
                        if (System.Runtime.InteropServices.Marshal.IsComObject(p_Param)) System.Runtime.InteropServices.Marshal.ReleaseComObject(p_Param);
                    }
                }
            }
            foreach (CAPEOPEN.ICapeIdentification p_Stream in p_OutletStreams)
            {
                if (p_Stream is CAPEOPEN.ICapeThermoMaterial)
                {
                    CAPEOPEN.ICapeThermoMaterial p_TMO = (CAPEOPEN.ICapeThermoMaterial)p_Stream;
                    CAPEOPEN.ICapeThermoCompounds p_TCompounds = (CAPEOPEN.ICapeThermoCompounds)p_Stream;
                    object obj1 = null;
                    object obj2 = null;
                    object obj3 = null;
                    object obj4 = null;
                    object obj5 = null;
                    object obj6 = null;
                    p_TCompounds.GetCompoundList(ref obj1, ref obj2, ref obj3, ref obj4, ref obj5, ref obj6);
                    String[] comps = (String[])obj1;
                    String[] propNames = new String[1];
                    string[] casNos = (string[])obj6;
                    string[] chemForms = (string[])obj2;
                    double[] molWts = (double[])obj5;
                    p_TMO.GetOverallProp("flow", "mass", ref obj1);
                    double[] outletFlow = (double[])obj1;
                    for (int i = 0; i < comps.Length; i++)
                    {
                        bool needsAdded = true;
                        foreach (System.Data.DataRow row in compounds.Rows)
                        {
                            if (comps[i] == row["Compound Name"].ToString())
                            {
                                needsAdded = false;
                            }
                        }
                        if (needsAdded)
                        {
                            System.Data.DataRow newRow = compounds.NewRow();
                            compounds.Rows.Add(newRow);
                            newRow["Compound Name"] = comps[i];
                            newRow["CAS Number"] = casNos[i].ToString();
                            newRow["Chemical Formula"] = chemForms[i].ToString();
                            newRow["Molecular Weight"] = Convert.ToDouble(molWts[i]);
                            if (!streams.Columns.Contains(comps[i])) streams.Columns.Add(comps[i]);
                        }
                    }
                }
                else
                {
                    if (p_Stream is CAPEOPEN.ICapeCollection)
                    {
                        CAPEOPEN.ICapeCollection p_Coll = (CAPEOPEN.ICapeCollection)p_Stream;
                        CAPEOPEN.ICapeParameter p_Param = (CAPEOPEN.ICapeParameter)p_Coll.Item("work");
                        double energyFlow = Convert.ToDouble(p_Param.value);
                        energy = energy + energyFlow * 3600 / 1000000;
                    }
                }
            }
        }

        void ResetStreams()
        {
            this.label5.Text = "";
            this.ClearStreamArrays();
            this.ClearUnitArrays();
            CAPEOPEN.ICapeCollection p_UnitColl = (CAPEOPEN.ICapeCollection)p_Monitoring.GetUnitOperationCollection();
            CAPEOPEN.ICapeCollection p_StreamColl = (CAPEOPEN.ICapeCollection)p_Monitoring.GetStreamCollection();
            //
            // Tab Page 2 - Unit Operations...
            //
            for (int i = 0; i < p_StreamColl.Count(); i++)
            {
                if (p_StreamColl.Item(i + 1) is CAPEOPEN.ICapeIdentification)
                {
                    CAPEOPEN.ICapeIdentification p_Stream = (CAPEOPEN.ICapeIdentification)p_StreamColl.Item(i + 1);
                    p_Streams.Add(p_Stream);
                    p_InletStreams.Add(p_Stream);
                    p_OutletStreams.Add(p_Stream);
                }
            }
            for (int i = 0; i < p_UnitColl.Count(); i++)
            {
                CAPEOPEN.ICapeUnit p_Unit = (CAPEOPEN.ICapeUnit)p_UnitColl.Item(i + 1);
                String unitName = ((CAPEOPEN.ICapeIdentification)p_Unit).ComponentName;
                CAPEOPEN.ICapeCollection p_UnitPortColl = (CAPEOPEN.ICapeCollection)p_Unit.ports;
                if (p_UnitPortColl.Count() > 1)
                {
                    p_Units.Add(p_Unit);
                    for (int j = 0; j < p_UnitPortColl.Count(); j++)
                    {
                        CAPEOPEN.ICapeUnitPort p_Port = (CAPEOPEN.ICapeUnitPort)p_UnitPortColl.Item(j + 1);
                        if (p_Port.connectedObject != null)
                        {
                            CAPEOPEN.ICapeIdentification p_Id = (CAPEOPEN.ICapeIdentification)p_Port.connectedObject;
                            String streamName = p_Id.ComponentName;
                            if (p_Port.direction == CAPEOPEN.CapePortDirection.CAPE_INLET)
                            {
                                int objectToRemove = 0;
                                for (int k = 0; k < p_OutletStreams.Count; k++)
                                {
                                    String currStream = p_OutletStreams[k].ComponentName;
                                    if (currStream == streamName)
                                    {
                                        objectToRemove = k;
                                    }
                                }
                                p_OutletStreams.RemoveAt(objectToRemove);
                            }
                            if (p_Port.direction == CAPEOPEN.CapePortDirection.CAPE_OUTLET)
                            {
                                int objectToRemove = 0;
                                for (int k = 0; k < p_InletStreams.Count; k++)
                                {
                                    if (p_InletStreams[k].ComponentName == streamName)
                                    {
                                        objectToRemove = k;
                                    }
                                }
                                p_InletStreams.RemoveAt(objectToRemove);
                            }
                        }
                        else
                        {
                            if (p_Port.portType == CAPEOPEN.CapePortType.CAPE_ENERGY)
                                this.label5.Text = "NOTE: Not all energy Ports are connected.";
                        }
                        if (System.Runtime.InteropServices.Marshal.IsComObject(p_Port)) System.Runtime.InteropServices.Marshal.ReleaseComObject(p_Port);
                    }
                }
                if (System.Runtime.InteropServices.Marshal.IsComObject(p_UnitPortColl)) System.Runtime.InteropServices.Marshal.ReleaseComObject(p_UnitPortColl);
                this.AvailableUnitOpsheckedListBox.Items.Add(((CAPEOPEN.ICapeIdentification)(p_UnitColl.Item(i + 1))).ComponentName, true);
            }
            foreach (CAPEOPEN.ICapeIdentification p_Id in p_InletStreams)
            {
                if (p_Id is CAPEOPEN.ICapeThermoMaterial)
                {
                    this.feedAndInletStreamListBox.Items.Add(p_Id.ComponentName);
                }
            }
            foreach (CAPEOPEN.ICapeIdentification p_Id1 in p_OutletStreams)
            {
                if (p_Id1 is CAPEOPEN.ICapeThermoMaterial)
                {
                    CAPEOPEN.ICapeThermoMaterial p_MO = (CAPEOPEN.ICapeThermoMaterial)p_Id1;
                    this.checkedListBox1.Items.Add(p_Id1.ComponentName, false);
                }
            }
        }

        void warCalculation()
        {
            this.CalcAvgScores();
            this.CalcImpactScores();
            this.CalcCaseImpacts();
            this.OverallImpactCalculations();
            this.WriteResultsFile();
        }

        void CalcAvgScores()
        {
            // indicator = Category_Value

            double[] sumScores = new double[7];
            int[] numRecords = new int[7];

            for (int i = 0; i < 7; i++)
            {
                sumScores[i] = 0;
                numRecords[i] = 0;
            }
            foreach (System.Data.DataRow data in this.warData.Rows)
            {
                if (data["Rat LD50"].GetType() != typeof(System.DBNull))
                {
                    double value = Convert.ToDouble(data["Rat LD50"]);
                    // RAT ORAL LD50 (omitting cyanogen chloride)
                    if (value > 2.6)
                    {
                        sumScores[0] = sumScores[0] + 1 / value;
                        numRecords[0]++;
                    }
                }
                if (data["OSHA PEL"].GetType() != typeof(System.DBNull))
                {
                    double value = Convert.ToDouble(data["OSHA PEL"]);
                    // OSHA TWA (omitting artificially inflated carcinogens
                    if (value > 0.00005)
                    {
                        sumScores[1] = sumScores[1] + 1 / value;
                        numRecords[1]++;
                    }
                }
                if (data["Fathead LC50"].GetType() != typeof(System.DBNull))
                {
                    sumScores[2] = sumScores[2] + 1 / Convert.ToDouble(data["Fathead LC50"]);
                    numRecords[2]++;
                }
                if (data["Global Warming Potential"].GetType() != typeof(System.DBNull))
                {
                    sumScores[3] = sumScores[3] + Convert.ToDouble(data["Global Warming Potential"]);
                    numRecords[3]++;
                }
                if (data["Ozone Depletion Potential"].GetType() != typeof(System.DBNull))
                {
                    sumScores[4] = sumScores[4] + Convert.ToDouble(data["Ozone Depletion Potential"]);
                    numRecords[4]++;
                }
                if (data["Photochemical Oxidation Potential"].GetType() != typeof(System.DBNull))
                {
                    sumScores[5] = sumScores[5] + Convert.ToDouble(data["Photochemical Oxidation Potential"]);
                    numRecords[5]++;
                }
                if (data["Acidification Potential"].GetType() != typeof(System.DBNull))
                {
                    sumScores[6] = sumScores[6] + Convert.ToDouble(data["Acidification Potential"]);
                    numRecords[6]++;
                }
            }
            AvgCatScore = new double[7];
            for (int i = 0; i < 7; i++)
            {
                AvgCatScore[i] = sumScores[i] / numRecords[i];
            }
        }
        void CalcImpactScores()
        {
            foreach (System.Data.DataRow compoundRow in this.compounds.Rows)
            {
                compoundRow["Human Ingestion Impact"] = 0.0;
                compoundRow["Terrestrial Toxicity Impact"] = 0.0;
                compoundRow["Human Dermal Impact"] = 0.0;
                compoundRow["Aquatic Toxicity Impact"] = 0.0;
                compoundRow["Terrestrial Toxicity Impact"] = 0.0;
                compoundRow["Global Warming Impact"] = 0.0;
                compoundRow["Ozone Impact"] = 0.0;
                compoundRow["Photochemical Oxidation Impact"] = 0.0;
                compoundRow["Acidification Impact"] = 0.0;
                foreach (System.Data.DataRow warRow in this.warData.Rows)
                {
                    if (warRow["CAS"].ToString() == compoundRow["CAS Number"].ToString())
                    {
                        if (warRow["Rat LD50"].GetType() != typeof(System.DBNull))
                        {
                            double value = Convert.ToDouble(warRow["Rat LD50"]);
                            compoundRow["Human Ingestion Impact"] = 1 / value / AvgCatScore[0];
                            compoundRow["Terrestrial Toxicity Impact"] = 1 / value / AvgCatScore[0];
                        }
                        if (warRow["OSHA PEL"].GetType() != typeof(System.DBNull))
                        {
                            double value = Convert.ToDouble(warRow["OSHA PEL"]);
                            // OSHA TWA (omitting artificially inflated carcinogens
                            compoundRow["Human Dermal Impact"] = 1 / value / AvgCatScore[1];
                        }
                        if (warRow["Fathead LC50"].GetType() != typeof(System.DBNull))
                        {
                            compoundRow["Aquatic Toxicity Impact"] = 1 / Convert.ToDouble(warRow["Fathead LC50"]) / AvgCatScore[2];
                        }
                        if (warRow["Global Warming Potential"].GetType() != typeof(System.DBNull))
                        {
                            compoundRow["Global Warming Impact"] = Convert.ToDouble(warRow["Global Warming Potential"]) / AvgCatScore[3];
                        }
                        if (warRow["Ozone Depletion Potential"].GetType() != typeof(System.DBNull))
                        {
                            compoundRow["Ozone Impact"] = Convert.ToDouble(warRow["Ozone Depletion Potential"]) / AvgCatScore[4];
                        }
                        if (warRow["Photochemical Oxidation Potential"].GetType() != typeof(System.DBNull))
                        {
                            compoundRow["Photochemical Oxidation Impact"] = Convert.ToDouble(warRow["Photochemical Oxidation Potential"]) / AvgCatScore[5];
                        }
                        if (warRow["Acidification Potential"].GetType() != typeof(System.DBNull))
                        {
                            compoundRow["Acidification Impact"] = Convert.ToDouble(warRow["Acidification Potential"]) / AvgCatScore[6];
                        }
                    }
                }
            }
        }

        void CalcCaseImpacts()
        {
            try
            {
                streams.Rows.Clear();
                productFlow = 0.0;
                foreach (CAPEOPEN.ICapeIdentification p_Stream in p_InletStreams)
                {
                    if (p_Stream is CAPEOPEN.ICapeThermoMaterial)
                    {
                        CAPEOPEN.ICapeThermoMaterial p_TMO = (CAPEOPEN.ICapeThermoMaterial)p_Stream;
                        CAPEOPEN.ICapeThermoCompounds p_TCompounds = (CAPEOPEN.ICapeThermoCompounds)p_Stream;
                        System.Data.DataRow row = streams.NewRow();
                        streams.Rows.Add(row);
                        row["Stream Name"] = p_Stream.ComponentName;
                        row["Type"] = "Inlet";
                        object obj1 = null;
                        object obj2 = null;
                        object obj3 = null;
                        object obj4 = null;
                        object obj5 = null;
                        object obj6 = null;
                        p_TCompounds.GetCompoundList(ref obj1, ref obj2, ref obj3, ref obj4, ref obj5, ref obj6);
                        String[] comps = (String[])obj1;
                        String[] propNames = new String[1];
                        string[] casNos = (string[])obj6;
                        string[] chemForms = (string[])obj2;
                        double[] molWts = (double[])obj5;
                        p_TMO.GetOverallProp("flow", "mass", ref obj1);
                        double[] inletFlow = (double[])obj1;
                        p_TMO.GetOverallProp("Fraction", "mass", ref obj1);
                        double[] fraction = (double[])obj1;
                        p_TMO.GetOverallProp("totalFlow", "mass", ref obj1);
                        double[] flow = (double[])obj1;
                        row["Total Flow"] = flow[0] * 3600;
                        double humanIngest = 0.0;
                        double humanDermal = 0.0;
                        double aquatic = 0.0;
                        double terrestrial = 0.0;
                        double global = 0.0;
                        double ozone = 0.0;
                        double photochemical = 0.0;
                        double acidification = 0.0;
                        for (int i = 0; i < comps.Length; i++)
                        {
                            foreach (System.Data.DataRow compoundRow in compounds.Rows)
                            {
                                if (comps[i] == compoundRow["Compound Name"].ToString())
                                {
                                    row[comps[i]] = fraction[i];
                                    humanIngest = humanIngest + fraction[i] * Convert.ToDouble(compoundRow["Human Ingestion Impact"]);
                                    humanDermal = humanDermal + fraction[i] * Convert.ToDouble(compoundRow["Human Dermal Impact"]);
                                    aquatic = aquatic + fraction[i] * Convert.ToDouble(compoundRow["Aquatic Toxicity Impact"]);
                                    terrestrial = terrestrial + fraction[i] * Convert.ToDouble(compoundRow["Terrestrial Toxicity Impact"]);
                                    global = global + fraction[i] * Convert.ToDouble(compoundRow["Global Warming Impact"]);
                                    ozone = ozone + fraction[i] * Convert.ToDouble(compoundRow["Ozone Impact"]);
                                    photochemical = photochemical + fraction[i] * Convert.ToDouble(compoundRow["Photochemical Oxidation Impact"]);
                                    acidification = acidification + fraction[i] * Convert.ToDouble(compoundRow["Acidification Impact"]);
                                }
                            }
                        }
                        row["Human Ingestion"] = -1 * flow[0] * 3600 * humanIngest;
                        row["Human Dermal"] = -1 * flow[0] * 3600 * humanDermal;
                        row["Aquatic Toxicity"] = -1 * flow[0] * 3600 * aquatic;
                        row["Terrestrial Toxicity"] = -1 * flow[0] * 3600 * terrestrial;
                        row["Global Warming"] = -1 * flow[0] * 3600 * global;
                        row["Ozone"] = -1 * flow[0] * 3600 * ozone;
                        row["Photochemical Oxidation"] = -1 * flow[0] * 3600 * photochemical;
                        row["Acidification"] = -1 * flow[0] * 3600 * acidification;
                        double iDot = Convert.ToDouble(this.numericUpDown1.Value) * Convert.ToDouble(row["Human Ingestion"]);
                        iDot = iDot + Convert.ToDouble(this.numericUpDown2.Value) * Convert.ToDouble(row["Human Dermal"]);
                        iDot = iDot + Convert.ToDouble(this.numericUpDown3.Value) * Convert.ToDouble(row["Aquatic Toxicity"]);
                        iDot = iDot + Convert.ToDouble(this.numericUpDown4.Value) * Convert.ToDouble(row["Terrestrial Toxicity"]);
                        iDot = iDot + Convert.ToDouble(this.numericUpDown5.Value) * Convert.ToDouble(row["Global Warming"]);
                        iDot = iDot + Convert.ToDouble(this.numericUpDown6.Value) * Convert.ToDouble(row["Ozone"]);
                        iDot = iDot + Convert.ToDouble(this.numericUpDown7.Value) * Convert.ToDouble(row["Photochemical Oxidation"]);
                        iDot = iDot + Convert.ToDouble(this.numericUpDown8.Value) * Convert.ToDouble(row["Acidification"]);
                        row["I Dot"] = iDot;
                    }
                }
                foreach (CAPEOPEN.ICapeIdentification p_Stream in p_OutletStreams)
                {
                    if (p_Stream is CAPEOPEN.ICapeThermoMaterial)
                    {
                        CAPEOPEN.ICapeThermoMaterial p_TMO = (CAPEOPEN.ICapeThermoMaterial)p_Stream;
                        CAPEOPEN.ICapeThermoCompounds p_TCompounds = (CAPEOPEN.ICapeThermoCompounds)p_Stream;
                        System.Data.DataRow row = streams.NewRow();
                        streams.Rows.Add(row);
                        string name = p_Stream.ComponentName;
                        row["Stream Name"] = p_Stream.ComponentName;
                        row["Type"] = "Inlet";
                        object obj1 = null;
                        object obj2 = null;
                        object obj3 = null;
                        object obj4 = null;
                        object obj5 = null;
                        object obj6 = null;
                        p_TCompounds.GetCompoundList(ref obj1, ref obj2, ref obj3, ref obj4, ref obj5, ref obj6);
                        String[] comps = (String[])obj1;
                        String[] propNames = new String[1];
                        string[] casNos = (string[])obj6;
                        string[] chemForms = (string[])obj2;
                        double[] molWts = (double[])obj5;
                        p_TMO.GetOverallProp("flow", "mass", ref obj1);
                        double[] inletFlow = (double[])obj1;
                        p_TMO.GetOverallProp("Fraction", "mass", ref obj1);
                        double[] fraction = (double[])obj1;
                        p_TMO.GetOverallProp("totalFlow", "mass", ref obj1);
                        double[] flow = (double[])obj1;
                        row["Total Flow"] = flow[0] * 3600;
                        double humanIngest = 0.0;
                        double humanDermal = 0.0;
                        double aquatic = 0.0;
                        double terrestrial = 0.0;
                        double global = 0.0;
                        double ozone = 0.0;
                        double photochemical = 0.0;
                        double acidification = 0.0;
                        foreach (Object obj in this.productStreams)
                        {
                            if (name == obj.ToString())
                            {
                                row["Type"] = "Product";
                                productFlow = productFlow + flow[0] * 3600;
                            }
                        }
                        for (int i = 0; i < comps.Length; i++)
                        {
                            foreach (System.Data.DataRow compoundRow in compounds.Rows)
                            {
                                if (comps[i] == compoundRow["Compound Name"].ToString())
                                {
                                    row[comps[i]] = fraction[i];
                                    humanIngest = humanIngest + fraction[i] * Convert.ToDouble(compoundRow["Human Ingestion Impact"]);
                                    humanDermal = humanDermal + fraction[i] * Convert.ToDouble(compoundRow["Human Dermal Impact"]);
                                    aquatic = aquatic + fraction[i] * Convert.ToDouble(compoundRow["Aquatic Toxicity Impact"]);
                                    terrestrial = terrestrial + fraction[i] * Convert.ToDouble(compoundRow["Terrestrial Toxicity Impact"]);
                                    global = global + fraction[i] * Convert.ToDouble(compoundRow["Global Warming Impact"]);
                                    ozone = ozone + fraction[i] * Convert.ToDouble(compoundRow["Ozone Impact"]);
                                    photochemical = photochemical + fraction[i] * Convert.ToDouble(compoundRow["Photochemical Oxidation Impact"]);
                                    acidification = acidification + fraction[i] * Convert.ToDouble(compoundRow["Acidification Impact"]);
                                }
                            }
                        }
                        row["Human Ingestion"] = flow[0] * 3600 * humanIngest;
                        row["Human Dermal"] = flow[0] * 3600 * humanDermal;
                        row["Aquatic Toxicity"] = flow[0] * 3600 * aquatic;
                        row["Terrestrial Toxicity"] = flow[0] * 3600 * terrestrial;
                        row["Global Warming"] = flow[0] * 3600 * global;
                        row["Ozone"] = flow[0] * 3600 * ozone;
                        row["Photochemical Oxidation"] = flow[0] * 3600 * photochemical;
                        row["Acidification"] = flow[0] * 3600 * acidification;
                        double iDot = Convert.ToDouble(this.numericUpDown1.Value) * Convert.ToDouble(row["Human Ingestion"]);
                        iDot = iDot + Convert.ToDouble(this.numericUpDown2.Value) * Convert.ToDouble(row["Human Dermal"]);
                        iDot = iDot + Convert.ToDouble(this.numericUpDown3.Value) * Convert.ToDouble(row["Aquatic Toxicity"]);
                        iDot = iDot + Convert.ToDouble(this.numericUpDown4.Value) * Convert.ToDouble(row["Terrestrial Toxicity"]);
                        iDot = iDot + Convert.ToDouble(this.numericUpDown5.Value) * Convert.ToDouble(row["Global Warming"]);
                        iDot = iDot + Convert.ToDouble(this.numericUpDown6.Value) * Convert.ToDouble(row["Ozone"]);
                        iDot = iDot + Convert.ToDouble(this.numericUpDown7.Value) * Convert.ToDouble(row["Photochemical Oxidation"]);
                        iDot = iDot + Convert.ToDouble(this.numericUpDown8.Value) * Convert.ToDouble(row["Acidification"]);
                        row["I Dot"] = iDot;
                    }
                }
                System.Data.DataRow row1 = streams.NewRow();
                streams.Rows.Add(row1);
                row1["Stream Name"] = "Energy";
                row1["Type"] = "Energy";
                row1["Total Flow"] = energy;
                if (this.energyTypeComboBox.Text == "Coal")
                {
                    row1["Type"] = "Coal";
                    row1["Human Ingestion"] = 7.83E-05 * energy;
                    row1["Human Dermal"] = 1.22E-06 * energy;
                    row1["Aquatic Toxicity"] = 7.83E-05 * energy;
                    row1["Terrestrial Toxicity"] = 2.65E-04 * energy;
                    row1["Global Warming"] = 1.93E-04 * energy;
                    row1["Ozone"] = 2.03E-09 * energy;
                    row1["Photochemical Oxidation"] = 7.07E-08 * energy;
                    row1["Acidification"] = 5.98E-03 * energy;
                }
                if (this.energyTypeComboBox.Text == "Natural Gas")
                {
                    row1["Type"] = "Natural Gas";
                    row1["Human Ingestion"] = 4.76E-08 * energy;
                    row1["Human Dermal"] = 1.30E-07 * energy;
                    row1["Aquatic Toxicity"] = 4.76E-08 * energy;
                    row1["Terrestrial Toxicity"] = 1.65E-05 * energy;
                    row1["Global Warming"] = 9.57E-05 * energy;
                    row1["Ozone"] = .63E-10 * energy;
                    row1["Photochemical Oxidation"] = 7.00E-08 * energy;
                    row1["Acidification"] = 9.92E-04 * energy;
                }
                if (this.energyTypeComboBox.Text == "Oil")
                {
                    row1["Type"] = "Oil";
                    row1["Human Ingestion"] = 9.14E-05 * energy;
                    row1["Human Dermal"] = 7.49E-06 * energy;
                    row1["Aquatic Toxicity"] = 9.14E-05 * energy;
                    row1["Terrestrial Toxicity"] = 2.17E-04 * energy;
                    row1["Global Warming"] = 1.52E-04 * energy;
                    row1["Ozone"] = 0.00E+00 * energy;
                    row1["Photochemical Oxidation"] = 3.54E-08 * energy;
                    row1["Acidification"] = 3.74E-03 * energy;
                }
                double iDot1 = Convert.ToDouble(this.numericUpDown1.Value) * Convert.ToDouble(row1["Human Ingestion"]);
                iDot1 = iDot1 + Convert.ToDouble(this.numericUpDown2.Value) * Convert.ToDouble(row1["Human Dermal"]);
                iDot1 = iDot1 + Convert.ToDouble(this.numericUpDown3.Value) * Convert.ToDouble(row1["Aquatic Toxicity"]);
                iDot1 = iDot1 + Convert.ToDouble(this.numericUpDown4.Value) * Convert.ToDouble(row1["Terrestrial Toxicity"]);
                iDot1 = iDot1 + Convert.ToDouble(this.numericUpDown5.Value) * Convert.ToDouble(row1["Global Warming"]);
                iDot1 = iDot1 + Convert.ToDouble(this.numericUpDown6.Value) * Convert.ToDouble(row1["Ozone"]);
                iDot1 = iDot1 + Convert.ToDouble(this.numericUpDown7.Value) * Convert.ToDouble(row1["Photochemical Oxidation"]);
                iDot1 = iDot1 + Convert.ToDouble(this.numericUpDown8.Value) * Convert.ToDouble(row1["Acidification"]);
                row1["I Dot"] = iDot1;
                foreach (System.Data.DataRow row2 in this.streams.Rows)
                {
                    if (productFlow > 0.0)
                        row2["I Hat"] = Convert.ToDouble(row2["I Dot"]) / productFlow;
                    else
                        row2["I Hat"] = 0.0;
                }
            }
            catch (System.Exception p_Ex)
            {
                System.Windows.Forms.MessageBox.Show(p_Ex.Message);
            }
        }

        void WriteResultsFile()
        {
            String blob = String.Empty;
            String hline;
            System.DateTime now = System.DateTime.Now;
            hline = "-----------------------------------------------------------------------------------------------------------";
            blob = String.Concat(blob, this.SheetName, System.Environment.NewLine);
            blob = String.Concat(blob, this.SheetDescription, System.Environment.NewLine);
            blob = String.Concat(blob, "File created on ", now.ToLongDateString(), " at ", now.ToLongTimeString(), System.Environment.NewLine);
            blob = String.Concat(blob, System.Environment.NewLine);
            blob = String.Concat(blob, hline, System.Environment.NewLine);
            blob = String.Concat(blob, System.Environment.NewLine);
            blob = String.Concat(blob, "NOTES", System.Environment.NewLine);
            blob = String.Concat(blob, System.Environment.NewLine);
            if (this.includeProductStreamsCheckBox.Checked)
                blob = String.Concat(blob, "Product stream(s) were included in the calculations", System.Environment.NewLine);
            else
                blob = String.Concat(blob, "Product stream(s) were not included in the calculations", System.Environment.NewLine);
            if (this.considerEnergyFlowsCheckBox.Checked)
                blob = String.Concat(blob, "Energy usage was included in the calculations", System.Environment.NewLine);
            else
                blob = String.Concat(blob, "Energy usage was not included in the calculations", System.Environment.NewLine);
            blob = String.Concat(blob, System.Environment.NewLine);
            blob = String.Concat(blob, hline, System.Environment.NewLine);
            blob = String.Concat(blob, System.Environment.NewLine);
            // need to code it so that for a certain number of streams its OK then generates
            // another table for more streams
            blob = String.Concat(blob, "STREAM REPORT", System.Environment.NewLine);
            blob = String.Concat(blob, System.Environment.NewLine);
            blob = String.Concat(blob, this.CaseStream());
            blob = String.Concat(blob, System.Environment.NewLine);
            blob = String.Concat(blob, hline, System.Environment.NewLine);
            blob = String.Concat(blob, System.Environment.NewLine);
            blob = String.Concat(blob, this.PrintFuelTypes());
            blob = String.Concat(blob, System.Environment.NewLine);
            blob = String.Concat(blob, hline, System.Environment.NewLine);
            blob = String.Concat(blob, System.Environment.NewLine);
            blob = String.Concat(blob, "WEIGHTING PROFILE", System.Environment.NewLine);
            blob = String.Concat(blob, System.Environment.NewLine);
            blob = String.Concat(blob, "Category  HTPI    HTPE    TTP     ATP     GWP     ODP     PCOP    AP", System.Environment.NewLine);
            blob = String.Concat(blob, "Weight    ", this.numericUpDown1.Value.ToString("F01").PadRight(8));
            blob = String.Concat(blob, this.numericUpDown2.Value.ToString("F01").PadRight(8));
            blob = String.Concat(blob, this.numericUpDown3.Value.ToString("F01").PadRight(8));
            blob = String.Concat(blob, this.numericUpDown4.Value.ToString("F01").PadRight(8));
            blob = String.Concat(blob, this.numericUpDown5.Value.ToString("F01").PadRight(8));
            blob = String.Concat(blob, this.numericUpDown6.Value.ToString("F01").PadRight(8));
            blob = String.Concat(blob, this.numericUpDown7.Value.ToString("F01").PadRight(8));
            blob = String.Concat(blob, this.numericUpDown8.Value.ToString("F01").PadRight(8));
            blob = String.Concat(blob, System.Environment.NewLine);
            blob = String.Concat(blob, System.Environment.NewLine);
            blob = String.Concat(blob, hline, System.Environment.NewLine);
            blob = String.Concat(blob, System.Environment.NewLine);
            blob = String.Concat(blob, "ENVIRONMENTAL IMPACT REPORT", System.Environment.NewLine);
            blob = String.Concat(blob, System.Environment.NewLine);
            blob = String.Concat(blob, "Total PEI Indexes", System.Environment.NewLine);
            blob = String.Concat(blob, System.Environment.NewLine);
            this.OverallImpactCalculations();
            blob = String.Concat(blob, this.GenerateTable());

            // ****************************************************
            // Create table 1
            blob = String.Concat(blob, this.GenerateTable2());
            blob = String.Concat(blob, System.Environment.NewLine);

            // **************************************************
            blob = String.Concat(blob, hline, System.Environment.NewLine);
            blob = String.Concat(blob, System.Environment.NewLine);
            blob = String.Concat(blob, this.GenerateChemicalReport());
            blob = String.Concat(blob, hline, System.Environment.NewLine);
            blob = String.Concat(blob, System.Environment.NewLine);
            this.textBox1.Text = blob;
        }

        String CaseStream()
        {
            String retVal = System.Environment.NewLine;
            retVal = String.Concat(retVal, System.Environment.NewLine);
            int ColWidth1 = 22;
            int ColWidth2 = 13;
            int lastRow = 0;
            while (lastRow < this.streams.Rows.Count)
            {
                if (lastRow != 0)
                {
                    retVal = String.Concat(retVal, System.Environment.NewLine);
                    retVal = String.Concat(retVal, System.Environment.NewLine);
                    retVal = String.Concat(retVal, "Continued...", System.Environment.NewLine);
                    retVal = String.Concat(retVal, System.Environment.NewLine);
                }
                int rows = this.streams.Rows.Count - lastRow - 1;
                if (rows > 5) rows = 5;
                String[] lines = new String[this.streams.Columns.Count - 10];
                lines[0] = "Name";
                lines[0] = lines[0].PadRight(ColWidth1);
                lines[1] = "Type";
                lines[1] = lines[1].PadRight(ColWidth1);
                lines[2] = "Flow rate";
                lines[2] = lines[2].PadRight(ColWidth1);
                int columns = streams.Columns.Count;
                for (int j = 13; j < streams.Columns.Count; j++)
                {
                    String temp = streams.Columns[j].ColumnName;
                    lines[j - 10] = temp.PadRight(ColWidth1);
                }
                for (int i = lastRow; i < lastRow + rows; i++)
                {
                    String streamName = streams.Rows[i]["Stream Name"].ToString();
                    if (streamName.Length > (ColWidth2 - 2))
                    {
                        int extra = ColWidth2 - 3;
                        streamName = streamName.Remove(extra);
                        streamName = String.Concat(streamName, "~");
                    }
                    lines[0] = String.Concat(lines[0], streamName.PadRight(ColWidth2));
                    lines[1] = String.Concat(lines[1], streams.Rows[i]["Type"].ToString().PadRight(ColWidth2));
                    lines[2] = String.Concat(lines[2], Convert.ToDouble(streams.Rows[i]["Total Flow"]).ToString("E02").PadRight(ColWidth2));
                    for (int j = 13; j < streams.Columns.Count; j++)
                    {
                        lines[j - 10] = String.Concat(lines[j - 10], Convert.ToDouble(streams.Rows[i][streams.Columns[j].ColumnName]).ToString("F04").PadRight(ColWidth2));
                    }
                }
                foreach (String line in lines)
                {
                    retVal = String.Concat(retVal, line, System.Environment.NewLine);
                }
                lastRow = lastRow + 5;
            }
            retVal = String.Concat(retVal, System.Environment.NewLine);
            retVal = String.Concat(retVal, System.Environment.NewLine);
            return retVal;

        }

        String PrintFuelTypes()
        {
            String retVal = "ENERGY USAGE REPORT";
            retVal = String.Concat(retVal, System.Environment.NewLine);
            retVal = String.Concat(retVal, System.Environment.NewLine);
            retVal = String.Concat(retVal, "Energy Usage(MJ/hr)  Fuel Type", System.Environment.NewLine);
            retVal = String.Concat(retVal, "       ", energy.ToString("E02"), "      ", this.energyTypeComboBox.Text, System.Environment.NewLine);
            return retVal;
        }

        void OverallImpactCalculations()
        {
            this.iGenTime = 0;
            this.iOutTime = 0;
            this.iEnergyTime = 0;
            this.peiOutTime = new double[8];
            this.peiLeaveMass = new double[8];
            this.peiGenTime = new double[8];
            this.peiGenMass = new double[8];
            this.peiEnergyTime = new double[8];
            for (int i = 0; i < 8; i++)
            {
                this.peiOutTime[i] = 0;
                this.peiLeaveMass[i] = 0;
                this.peiGenTime[i] = 0;
                this.peiGenMass[i] = 0;
                this.peiEnergyTime[i] = 0;
            }
            foreach (System.Data.DataRow row in this.streams.Rows)
            {
                if (row["Type"].ToString() == "Waste")
                {
                    this.iGenTime = this.iGenTime + Convert.ToDouble(row["I Dot"]);
                    this.iOutTime = this.iOutTime + Convert.ToDouble(row["I Dot"]);
                    peiOutTime[0] = peiOutTime[0] + Convert.ToDouble(row["Human Ingestion"]);
                    peiOutTime[1] = peiOutTime[1] + Convert.ToDouble(row["Human Dermal"]);
                    peiOutTime[2] = peiOutTime[2] + Convert.ToDouble(row["Terrestrial Toxicity"]);
                    peiOutTime[3] = peiOutTime[3] + Convert.ToDouble(row["Aquatic Toxicity"]);
                    peiOutTime[4] = peiOutTime[4] + Convert.ToDouble(row["Global Warming"]);
                    peiOutTime[5] = peiOutTime[5] + Convert.ToDouble(row["Ozone"]);
                    peiOutTime[6] = peiOutTime[6] + Convert.ToDouble(row["Photochemical Oxidation"]);
                    peiOutTime[7] = peiOutTime[7] + Convert.ToDouble(row["Acidification"]);
                    peiGenTime[0] = peiGenTime[0] + Convert.ToDouble(row["Human Ingestion"]);
                    peiGenTime[1] = peiGenTime[1] + Convert.ToDouble(row["Human Dermal"]);
                    peiGenTime[2] = peiGenTime[2] + Convert.ToDouble(row["Terrestrial Toxicity"]);
                    peiGenTime[3] = peiGenTime[3] + Convert.ToDouble(row["Aquatic Toxicity"]);
                    peiGenTime[4] = peiGenTime[4] + Convert.ToDouble(row["Global Warming"]);
                    peiGenTime[5] = peiGenTime[5] + Convert.ToDouble(row["Ozone"]);
                    peiGenTime[6] = peiGenTime[6] + Convert.ToDouble(row["Photochemical Oxidation"]);
                    peiGenTime[7] = peiGenTime[7] + Convert.ToDouble(row["Acidification"]);
                }
                if (this.includeProductStreamsCheckBox.Checked && (row["Type"].ToString() == "Product"))
                {
                    this.iOutTime = this.iOutTime + Convert.ToDouble(row["I Dot"]);
                    this.iGenTime = this.iGenTime + Convert.ToDouble(row["I Dot"]);
                    peiOutTime[0] = peiOutTime[0] + Convert.ToDouble(row["Human Ingestion"]);
                    peiOutTime[1] = peiOutTime[1] + Convert.ToDouble(row["Human Dermal"]);
                    peiOutTime[2] = peiOutTime[2] + Convert.ToDouble(row["Terrestrial Toxicity"]);
                    peiOutTime[3] = peiOutTime[3] + Convert.ToDouble(row["Aquatic Toxicity"]);
                    peiOutTime[4] = peiOutTime[4] + Convert.ToDouble(row["Global Warming"]);
                    peiOutTime[5] = peiOutTime[5] + Convert.ToDouble(row["Ozone"]);
                    peiOutTime[6] = peiOutTime[6] + Convert.ToDouble(row["Photochemical Oxidation"]);
                    peiOutTime[7] = peiOutTime[7] + Convert.ToDouble(row["Acidification"]);
                    peiGenTime[0] = peiGenTime[0] + Convert.ToDouble(row["Human Ingestion"]);
                    peiGenTime[1] = peiGenTime[1] + Convert.ToDouble(row["Human Dermal"]);
                    peiGenTime[2] = peiGenTime[2] + Convert.ToDouble(row["Terrestrial Toxicity"]);
                    peiGenTime[3] = peiGenTime[3] + Convert.ToDouble(row["Aquatic Toxicity"]);
                    peiGenTime[4] = peiGenTime[4] + Convert.ToDouble(row["Global Warming"]);
                    peiGenTime[5] = peiGenTime[5] + Convert.ToDouble(row["Ozone"]);
                    peiGenTime[6] = peiGenTime[6] + Convert.ToDouble(row["Photochemical Oxidation"]);
                    peiGenTime[7] = peiGenTime[7] + Convert.ToDouble(row["Acidification"]);
                }
                if (row["Type"].ToString() == "Inlet")
                {
                    this.iGenTime = this.iGenTime + Convert.ToDouble(row["I Dot"]);
                    peiGenTime[0] = peiGenTime[0] + Convert.ToDouble(row["Human Ingestion"]);
                    peiGenTime[1] = peiGenTime[1] + Convert.ToDouble(row["Human Dermal"]);
                    peiGenTime[2] = peiGenTime[2] + Convert.ToDouble(row["Terrestrial Toxicity"]);
                    peiGenTime[3] = peiGenTime[3] + Convert.ToDouble(row["Aquatic Toxicity"]);
                    peiGenTime[4] = peiGenTime[4] + Convert.ToDouble(row["Global Warming"]);
                    peiGenTime[5] = peiGenTime[5] + Convert.ToDouble(row["Ozone"]);
                    peiGenTime[6] = peiGenTime[6] + Convert.ToDouble(row["Photochemical Oxidation"]);
                    peiGenTime[7] = peiGenTime[7] + Convert.ToDouble(row["Acidification"]);
                }
                if (row["Stream Name"].ToString() == "Energy")
                {
                    peiEnergyTime[0] = peiEnergyTime[0] + Convert.ToDouble(row["Human Ingestion"]);
                    peiEnergyTime[1] = peiEnergyTime[1] + Convert.ToDouble(row["Human Dermal"]);
                    peiEnergyTime[2] = peiEnergyTime[2] + Convert.ToDouble(row["Aquatic Toxicity"]);
                    peiEnergyTime[3] = peiEnergyTime[3] + Convert.ToDouble(row["Terrestrial Toxicity"]);
                    peiEnergyTime[4] = peiEnergyTime[4] + Convert.ToDouble(row["Global Warming"]);
                    peiEnergyTime[5] = peiEnergyTime[5] + Convert.ToDouble(row["Ozone"]);
                    peiEnergyTime[6] = peiEnergyTime[6] + Convert.ToDouble(row["Photochemical Oxidation"]);
                    peiEnergyTime[7] = peiEnergyTime[7] + Convert.ToDouble(row["Acidification"]);
                    this.iEnergyTime = Convert.ToDouble(row["I Dot"]);
                    if (this.considerEnergyFlowsCheckBox.Checked)
                    {
                        this.iOutTime = this.iOutTime + Convert.ToDouble(row["I Dot"]);
                        this.iGenTime = this.iGenTime + Convert.ToDouble(row["I Dot"]);
                        peiOutTime[0] = peiOutTime[0] + Convert.ToDouble(row["Human Ingestion"]);
                        peiOutTime[1] = peiOutTime[1] + Convert.ToDouble(row["Human Dermal"]);
                        peiOutTime[2] = peiOutTime[2] + Convert.ToDouble(row["Terrestrial Toxicity"]);
                        peiOutTime[3] = peiOutTime[3] + Convert.ToDouble(row["Aquatic Toxicity"]);
                        peiOutTime[4] = peiOutTime[4] + Convert.ToDouble(row["Global Warming"]);
                        peiOutTime[5] = peiOutTime[5] + Convert.ToDouble(row["Ozone"]);
                        peiOutTime[6] = peiOutTime[6] + Convert.ToDouble(row["Photochemical Oxidation"]);
                        peiOutTime[7] = peiOutTime[7] + Convert.ToDouble(row["Acidification"]);
                        peiGenTime[0] = peiGenTime[0] + Convert.ToDouble(row["Human Ingestion"]);
                        peiGenTime[1] = peiGenTime[1] + Convert.ToDouble(row["Human Dermal"]);
                        peiGenTime[2] = peiGenTime[2] + Convert.ToDouble(row["Terrestrial Toxicity"]);
                        peiGenTime[3] = peiGenTime[3] + Convert.ToDouble(row["Aquatic Toxicity"]);
                        peiGenTime[4] = peiGenTime[4] + Convert.ToDouble(row["Global Warming"]);
                        peiGenTime[5] = peiGenTime[5] + Convert.ToDouble(row["Ozone"]);
                        peiGenTime[6] = peiGenTime[6] + Convert.ToDouble(row["Photochemical Oxidation"]);
                        peiGenTime[7] = peiGenTime[7] + Convert.ToDouble(row["Acidification"]);
                    }
                }
            }
            this.iGenMass = this.iGenTime / this.productFlow;
            this.iOutMass = this.iOutTime / this.productFlow;
            this.iEnergyMass = this.iEnergyTime / this.productFlow;
            for (int i = 0; i < 8; i++)
            {
                this.peiLeaveMass[i] = this.peiOutTime[i] / this.productFlow;
                this.peiGenMass[i] = this.peiGenTime[i] / this.productFlow;
            }
        }

        String GenerateTable()
        {
            String retVal = String.Empty;
            String[] strHeader = new String[6];
            strHeader[0] = "Iout PEI/hour     ";
            strHeader[1] = "Iout PEI/kg       ";
            strHeader[2] = "Igen PEI/hour     ";
            strHeader[3] = "Igen PEI/kg       ";
            strHeader[4] = "Ienergy PEI/hour  ";
            strHeader[5] = "Ienergy PEI/kg    ";
            foreach (String category in strHeader)
            {
                retVal = String.Concat(retVal, category.PadLeft(14));
            }
            String na = "N/A";
            retVal = String.Concat(retVal, System.Environment.NewLine);
            retVal = String.Concat(retVal, this.iOutTime.ToString("E03").PadRight(18));
            if (this.productFlow != 0.0)
                retVal = String.Concat(retVal, this.iOutMass.ToString("E03").PadRight(18));
            else
                retVal = String.Concat(retVal, na.PadRight(18));
            retVal = String.Concat(retVal, this.iGenTime.ToString("E03").PadRight(18));
            if (this.productFlow != 0.0)
                retVal = String.Concat(retVal, this.iGenMass.ToString("E03").PadRight(18));
            else
                retVal = String.Concat(retVal, na.PadRight(18));
            retVal = String.Concat(retVal, this.iEnergyTime.ToString("E03").PadRight(18));
            if (this.productFlow != 0.0)
                retVal = String.Concat(retVal, this.iEnergyMass.ToString("E03").PadRight(18));
            else
                retVal = String.Concat(retVal, na.PadRight(18));
            retVal = String.Concat(retVal, System.Environment.NewLine);
            return retVal;
        }

        String GenerateTable2()
        {
            String retVal = String.Empty;
            String[] strHeader = new String[9];
            strHeader[0] = "HTPI";
            strHeader[1] = "HTPE";
            strHeader[2] = "TTP";
            strHeader[3] = "ATP";
            strHeader[4] = "GWP";
            strHeader[5] = "ODP";
            strHeader[6] = "PCOP";
            strHeader[7] = "AP";
            strHeader[8] = "TOTAL";
            retVal = String.Concat(retVal, System.Environment.NewLine);
            retVal = String.Concat(retVal, "Individual impact categories", System.Environment.NewLine);
            retVal = String.Concat(retVal, System.Environment.NewLine);
            retVal = String.Concat(retVal, "Total output rate of PEI (PEI/hour)", System.Environment.NewLine);
            String na = "N/A";
            double total = 0;
            foreach (String category in strHeader)
            {
                retVal = String.Concat(retVal, category.PadRight(12));
            }
            retVal = String.Concat(retVal, System.Environment.NewLine);
            foreach (double value in this.peiOutTime)
            {
                retVal = String.Concat(retVal, value.ToString("E02").PadRight(12));
                total = total + value;
            }
            retVal = String.Concat(retVal, total.ToString("E02").PadRight(12));
            retVal = String.Concat(retVal, System.Environment.NewLine);
            retVal = String.Concat(retVal, System.Environment.NewLine);
            retVal = String.Concat(retVal, "Total PEI leaving the system per mass of products (PEI/kg product)", System.Environment.NewLine);
            foreach (String category in strHeader)
            {
                retVal = String.Concat(retVal, category.PadRight(12));
            }
            retVal = String.Concat(retVal, System.Environment.NewLine);
            foreach (double value in this.peiOutTime)
            {
                if (this.productFlow != 0.0)
                    retVal = String.Concat(retVal, (value / this.productFlow).ToString("E02").PadRight(12));
                else
                    retVal = String.Concat(retVal, na.PadRight(12));
            }
            if (this.productFlow != 0.0)
                retVal = String.Concat(retVal, (total / this.productFlow).ToString("E02").PadRight(12));
            else
                retVal = String.Concat(retVal, na.PadRight(12));
            retVal = String.Concat(retVal, System.Environment.NewLine);
            retVal = String.Concat(retVal, System.Environment.NewLine);
            retVal = String.Concat(retVal, "Total generation rate of PEI (PEI/hour)", System.Environment.NewLine);
            foreach (String category in strHeader)
            {
                retVal = String.Concat(retVal, category.PadRight(12));
            }
            total = 0;
            retVal = String.Concat(retVal, System.Environment.NewLine);
            foreach (double value in this.peiGenTime)
            {
                retVal = String.Concat(retVal, value.ToString("E02").PadRight(12));
                total = total + value;
            }
            retVal = String.Concat(retVal, total.ToString("E02").PadRight(12));
            retVal = String.Concat(retVal, System.Environment.NewLine);
            retVal = String.Concat(retVal, System.Environment.NewLine);
            retVal = String.Concat(retVal, "Total PEI generated within a system per mass of products (PEI/kg product)", System.Environment.NewLine);
            foreach (String category in strHeader)
            {
                retVal = String.Concat(retVal, category.PadRight(12));
            }
            retVal = String.Concat(retVal, System.Environment.NewLine);
            foreach (double value in this.peiGenTime)
            {
                if (this.productFlow != 0.0)
                    retVal = String.Concat(retVal, (value / this.productFlow).ToString("E02").PadRight(12));
                else
                    retVal = String.Concat(retVal, na.PadRight(12));
            }
            if (this.productFlow != 0.0)
                retVal = String.Concat(retVal, (total / this.productFlow).ToString("E02").PadRight(12));
            else
                retVal = String.Concat(retVal, na.PadRight(12));
            retVal = String.Concat(retVal, System.Environment.NewLine);
            retVal = String.Concat(retVal, System.Environment.NewLine);
            if (this.considerEnergyFlowsCheckBox.Checked)
            {
                retVal = String.Concat(retVal, "Output rate of PEI from energy usage (PEI/hour)", System.Environment.NewLine);
                foreach (String category in strHeader)
                {
                    retVal = String.Concat(retVal, category.PadRight(12));
                }
                retVal = String.Concat(retVal, System.Environment.NewLine);
                total = 0;
                foreach (double value in this.peiEnergyTime)
                {
                    retVal = String.Concat(retVal, value.ToString("E02").PadRight(12));
                    total = total + value;
                }
                retVal = String.Concat(retVal, total.ToString("E02").PadRight(12));
                retVal = String.Concat(retVal, System.Environment.NewLine);
                retVal = String.Concat(retVal, System.Environment.NewLine);
            }
            return retVal;
        }

        String GenerateChemicalReport()
        {
            String retVal = String.Empty;
            String[] strHeader = new String[8];
            strHeader[0] = "HTPI";
            strHeader[1] = "HTPE";
            strHeader[2] = "TTP";
            strHeader[3] = "ATP";
            strHeader[4] = "GWP";
            strHeader[5] = "ODP";
            strHeader[6] = "PCOP";
            strHeader[7] = "AP";
            retVal = String.Concat(retVal, System.Environment.NewLine);
            retVal = String.Concat(retVal, "CHEMICAL REPORT", System.Environment.NewLine);
            retVal = String.Concat(retVal, System.Environment.NewLine);
            retVal = String.Concat(retVal, "                                                  Normalized impact score", System.Environment.NewLine);
            retVal = String.Concat(retVal, "Chemical            ");
            foreach (String category in strHeader)
            {
                retVal = String.Concat(retVal, category.PadRight(12));
            }
            retVal = String.Concat(retVal, System.Environment.NewLine);
            foreach (System.Data.DataRow row in this.compounds.Rows)
            {
                string name = row["Compound Name"].ToString();
                if (name.Length > 16) name = name=name.Remove(16);
                retVal = String.Concat(retVal, name.PadRight(20));
                retVal = String.Concat(retVal, Convert.ToDouble(row["Human Ingestion Impact"]).ToString("E02").PadRight(12));
                retVal = String.Concat(retVal, Convert.ToDouble(row["Human Dermal Impact"]).ToString("E02").PadRight(12));
                retVal = String.Concat(retVal, Convert.ToDouble(row["Terrestrial Toxicity Impact"]).ToString("E02").PadRight(12));
                retVal = String.Concat(retVal, Convert.ToDouble(row["Aquatic Toxicity Impact"]).ToString("E02").PadRight(12));
                retVal = String.Concat(retVal, Convert.ToDouble(row["Global Warming Impact"]).ToString("E02").PadRight(12));
                retVal = String.Concat(retVal, Convert.ToDouble(row["Ozone Impact"]).ToString("E02").PadRight(12));
                retVal = String.Concat(retVal, Convert.ToDouble(row["Photochemical Oxidation Impact"]).ToString("E02").PadRight(12));
                retVal = String.Concat(retVal, Convert.ToDouble(row["Acidification Impact"]).ToString("E02").PadRight(12));
                retVal = String.Concat(retVal, System.Environment.NewLine);
            }
            retVal = String.Concat(retVal, System.Environment.NewLine);
            return retVal;
        }



        // The PrintPage event is raised for each page to be printed.
        private void printDocument1_PrintPage(object sender, System.Drawing.Printing.PrintPageEventArgs ev)
        {
            float linesPerPage = 0;
            float yPos = 0;
            int count = 0;
            float leftMargin = (float)ev.MarginBounds.Left;
            float topMargin = (float)ev.MarginBounds.Top;
            String line = null;

            // Calculate the number of lines per page.
            linesPerPage = ev.MarginBounds.Height / printFont.GetHeight(ev.Graphics);

            // Print each line of the file.
            while (count < linesPerPage && ((line = streamToPrint.ReadLine()) != null))
            {
                yPos = topMargin + (count * printFont.GetHeight(ev.Graphics));
                ev.Graphics.DrawString(line, printFont, Brushes.Black, leftMargin, yPos, new StringFormat());
                count++;
            }


            // If more lines exist, print another page.
            if (line != null)
                ev.HasMorePages = true;
            else
                ev.HasMorePages = false;
        }

        private void AvailableUnitOpsheckedListBox_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            try
            {
                if (!starting)
                {
                    CAPEOPEN.ICapeUnit changedUnit = null;
                    this.feedAndInletStreamListBox.Items.Clear();
                    productStreams.Clear();
                    System.Collections.IEnumerator myEnum = this.checkedListBox1.CheckedItems.GetEnumerator();
                    while (myEnum.MoveNext())
                    {
                        productStreams.Add(myEnum.Current.ToString());
                    }
                    this.checkedListBox1.Items.Clear();
                    String name = this.AvailableUnitOpsheckedListBox.Items[e.Index].ToString();
                    foreach (CAPEOPEN.ICapeUnit unit in p_Units)
                    {
                        if (((CAPEOPEN.ICapeIdentification)unit).ComponentName == name)
                        {
                            changedUnit = unit;
                        }
                        else
                        {
                        }
                    }
                    CAPEOPEN.ICapeCollection p_UnitPortColl = (CAPEOPEN.ICapeCollection)changedUnit.ports;
                    if (e.NewValue == System.Windows.Forms.CheckState.Checked)
                    {
                        for (int j = 0; j < p_UnitPortColl.Count(); j++)
                        {
                            CAPEOPEN.ICapeUnitPort p_Port = (CAPEOPEN.ICapeUnitPort)p_UnitPortColl.Item(j + 1);
                            CAPEOPEN.ICapeIdentification p_Id = (CAPEOPEN.ICapeIdentification)p_Port.connectedObject;
                            if (p_Id != null)
                            {
                                CAPEOPEN.ICapeIdentification p_Outlet = null;
                                CAPEOPEN.ICapeIdentification p_Inlet = null;
                                foreach (CAPEOPEN.ICapeIdentification stream in p_OutletStreams)
                                {
                                    if (stream.ComponentName == p_Id.ComponentName)
                                    {
                                        p_Outlet = stream;
                                    }
                                }
                                foreach (CAPEOPEN.ICapeIdentification stream in p_InletStreams)
                                {
                                    if (stream.ComponentName == p_Id.ComponentName)
                                    {
                                        p_Inlet = stream;
                                    }
                                }
                                if (p_Port.direction == CAPEOPEN.CapePortDirection.CAPE_INLET)
                                {
                                    if (p_Outlet != null)
                                        p_OutletStreams.Remove(p_Outlet);
                                    else
                                        p_InletStreams.Add(p_Id);
                                }
                                if (p_Port.direction == CAPEOPEN.CapePortDirection.CAPE_OUTLET)
                                {
                                    if (p_Inlet != null)
                                        p_InletStreams.Remove(p_Inlet);
                                    else
                                        p_OutletStreams.Add(p_Id);
                                }
                            }
                        }
                    }
                    if (e.NewValue == System.Windows.Forms.CheckState.Unchecked)
                    {
                        for (int j = 0; j < p_UnitPortColl.Count(); j++)
                        {
                            CAPEOPEN.ICapeUnitPort p_Port = (CAPEOPEN.ICapeUnitPort)p_UnitPortColl.Item(j + 1);
                            CAPEOPEN.ICapeIdentification p_Id = (CAPEOPEN.ICapeIdentification)p_Port.connectedObject;
                            if (p_Id != null)
                            {
                                CAPEOPEN.ICapeIdentification p_Outlet = null;
                                CAPEOPEN.ICapeIdentification p_Inlet = null;
                                foreach (CAPEOPEN.ICapeIdentification stream in p_OutletStreams)
                                {
                                    if (stream.ComponentName == p_Id.ComponentName)
                                    {
                                        p_Outlet = stream;
                                    }
                                }
                                foreach (CAPEOPEN.ICapeIdentification stream in p_InletStreams)
                                {
                                    if (stream.ComponentName == p_Id.ComponentName)
                                    {
                                        p_Inlet = stream;
                                    }
                                }
                                if (p_Port.direction == CAPEOPEN.CapePortDirection.CAPE_INLET)
                                {
                                    if (p_Inlet != null)
                                        p_InletStreams.Remove(p_Inlet);
                                    else
                                        p_OutletStreams.Add(p_Id);
                                }
                                if (p_Port.direction == CAPEOPEN.CapePortDirection.CAPE_OUTLET)
                                {
                                    if (p_Outlet != null)
                                        p_OutletStreams.Remove(p_Outlet);
                                    else
                                        p_InletStreams.Add(p_Id);
                                }
                            }
                        }
                    }
                    foreach (CAPEOPEN.ICapeIdentification p_Id1 in p_InletStreams)
                    {
                        if ((p_Id1 is CAPEOPEN.ICapeThermoMaterial) || (p_Id1 is CAPEOPEN.ICapeThermoMaterial))
                        {
                            this.feedAndInletStreamListBox.Items.Add(p_Id1.ComponentName);
                        }
                    }
                    foreach (CAPEOPEN.ICapeIdentification p_Id2 in p_OutletStreams)
                    {
                        if ((p_Id2 is CAPEOPEN.ICapeThermoMaterial) || (p_Id2 is CAPEOPEN.ICapeThermoMaterial))
                        {
                            this.checkedListBox1.Items.Add(p_Id2.ComponentName, false);
                        }
                    }
                    this.UpdateStreams();
                    this.warCalculation();
                }
            }
            catch (System.Exception p_Ex)
            {
                System.Windows.Forms.MessageBox.Show(p_Ex.Message);
            }
        }

        private void checkedListBox1_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            if (e.NewValue == System.Windows.Forms.CheckState.Checked)
            {
                productStreams.Add(this.checkedListBox1.Items[e.Index].ToString());
            }
            else
            {
                productStreams.Remove(this.checkedListBox1.Items[e.Index].ToString());
            }
            this.UpdateStreams();
            this.warCalculation();
        }
    }
}
